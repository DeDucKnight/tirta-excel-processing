# Form implementation generated from reading ui file 'progressExcel.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QFileDialog, QMessageBox
import pandas as pd
import openpyxl
from openpyxl.styles import PatternFill, Alignment, Border, Side, Font
import uuid

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(724, 483)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # Upload Button
        self.uploadButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.uploadButton.setGeometry(QtCore.QRect(20, 10, 111, 31))
        self.uploadButton.setObjectName("uploadButton")

        # Label to Display File Name
        self.fileNameLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.fileNameLabel.setGeometry(QtCore.QRect(160, 10, 461, 31))
        self.fileNameLabel.setObjectName("fileNameLabel")

        # Sheet Selection Description Label
        self.sheetLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.sheetLabel.setGeometry(QtCore.QRect(20, 50, 200, 31))
        self.sheetLabel.setObjectName("sheetLabel")
        self.sheetLabel.setText("Pilih worksheet:")
        self.sheetLabel.setVisible(False)

        # Sheet Selection ComboBox
        self.sheetComboBox = QtWidgets.QComboBox(parent=self.centralwidget)
        self.sheetComboBox.setGeometry(QtCore.QRect(20, 80, 300, 31))
        self.sheetComboBox.setObjectName("sheetComboBox")
        self.sheetComboBox.setVisible(False)

        # Number Group Box
        self.numberGroupBox = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.numberGroupBox.setGeometry(QtCore.QRect(20, 120, 681, 101))
        self.numberGroupBox.setObjectName("numberGroupBox")
        self.numYesRadioButton = QtWidgets.QRadioButton(parent=self.numberGroupBox)
        self.numYesRadioButton.setGeometry(QtCore.QRect(10, 30, 89, 20))
        self.numYesRadioButton.setObjectName("numYesRadioButton")
        self.numNoRadioButton = QtWidgets.QRadioButton(parent=self.numberGroupBox)
        self.numNoRadioButton.setGeometry(QtCore.QRect(10, 60, 91, 20))
        self.numNoRadioButton.setObjectName("numNoRadioButton")

        # Header Group Box
        self.headerGroupBox = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.headerGroupBox.setGeometry(QtCore.QRect(20, 230, 681, 101))
        self.headerGroupBox.setObjectName("headerGroupBox")
        self.headerYesRadioButton = QtWidgets.QRadioButton(parent=self.headerGroupBox)
        self.headerYesRadioButton.setGeometry(QtCore.QRect(10, 30, 89, 20))
        self.headerYesRadioButton.setObjectName("headerYesRadioButton")
        self.headerNoRadioButton = QtWidgets.QRadioButton(parent=self.headerGroupBox)
        self.headerNoRadioButton.setGeometry(QtCore.QRect(10, 60, 89, 20))
        self.headerNoRadioButton.setObjectName("headerNoRadioButton")
        self.headerRowLineEdit = QtWidgets.QLineEdit(parent=self.headerGroupBox)
        self.headerRowLineEdit.setGeometry(QtCore.QRect(240, 30, 113, 22))
        self.headerRowLineEdit.setObjectName("headerRowLineEdit")
        self.headerRowLabel = QtWidgets.QLabel(parent=self.headerGroupBox)
        self.headerRowLabel.setGeometry(QtCore.QRect(120, 30, 121, 21))
        self.headerRowLabel.setObjectName("headerRowLabel")
        self.headerRowLabel.setVisible(False)
        self.headerRowLineEdit.setVisible(False)
        self.headerRowLineEdit.setEnabled(False)

        # Generate Button
        self.generateButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.generateButton.setGeometry(QtCore.QRect(590, 390, 111, 31))
        self.generateButton.setObjectName("generateButton")
        self.generateButton.setEnabled(False)  # Disabled until a file is chosen

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 724, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actiontest1 = QtGui.QAction(parent=MainWindow)
        self.actiontest1.setObjectName("actiontest1")
        self.actiontest2 = QtGui.QAction(parent=MainWindow)
        self.actiontest2.setObjectName("actiontest2")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Connect button click events to custom slots
        self.uploadButton.clicked.connect(self.on_uploadButton_clicked)
        self.generateButton.clicked.connect(self.on_generateButton_clicked)
        self.headerYesRadioButton.toggled.connect(self.on_headerYesRadioButton_toggled)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.uploadButton.setText(_translate("MainWindow", "Pilih file"))
        self.fileNameLabel.setText(_translate("MainWindow", "Tidak ada file"))
        self.sheetLabel.setText(_translate("MainWindow", "Pilih worksheet:"))
        self.numberGroupBox.setTitle(_translate("MainWindow", "Apakah file memiliki sistem penomoran?"))
        self.numYesRadioButton.setText(_translate("MainWindow", "Ada"))
        self.numNoRadioButton.setText(_translate("MainWindow", "Tidak ada"))
        self.headerGroupBox.setTitle(_translate("MainWindow", "Apakah file memiliki header?"))
        self.headerYesRadioButton.setText(_translate("MainWindow", "Ada"))
        self.headerNoRadioButton.setText(_translate("MainWindow", "Tidak ada"))
        self.headerRowLineEdit.setInputMask(_translate("MainWindow", "00"))
        self.headerRowLabel.setText(_translate("MainWindow", "Jumlah baris header:"))
        self.generateButton.setText(_translate("MainWindow", "Buat excel"))
        self.actiontest1.setText(_translate("MainWindow", "test1"))
        self.actiontest2.setText(_translate("MainWindow", "test2?"))

    def on_uploadButton_clicked(self):
        options = QFileDialog.Option.DontUseNativeDialog
        file_filter = "Excel Files (*.xlsx *.xls)"  # Restrict to Excel files only
        file_name, _ = QFileDialog.getOpenFileName(None, "Select Excel File", "", file_filter, options=options)

        if file_name:
            self.fileNameLabel.setText(file_name)  # Display the selected file path
            try:
                # Store the file path for later use
                self.file_path = file_name

                # Get available sheet names using pandas ExcelFile
                xls = pd.ExcelFile(file_name)
                sheet_names = xls.sheet_names

                # Populate the combo box with the sheet names and show it along with its label
                self.sheetComboBox.clear()
                self.sheetComboBox.addItems(sheet_names)
                self.sheetComboBox.setVisible(True)
                self.sheetLabel.setVisible(True)

                # Enable the generate button since a file has been chosen
                self.generateButton.setEnabled(True)

                # Optionally, show a preview of the first sheet
                df_preview = pd.read_excel(file_name, sheet_name=sheet_names[0])
                preview = df_preview.head().to_string(index=False)
                QMessageBox.information(None, "Excel Preview", f"Sheet: {sheet_names[0]}\nFirst 5 Rows:\n{preview}")

            except Exception as e:
                QMessageBox.critical(None, "Error", f"Failed to read file:\n{str(e)}")

    def on_generateButton_clicked(self):
        # 1. Ensure a file is selected & read the userâ€™s chosen sheet
        if not hasattr(self, "file_path"):
            QMessageBox.warning(None, "Warning", "Please upload an Excel file first.")
            return

        selected_sheet = self.sheetComboBox.currentText()

        try:
            # 2. Determine how many rows to skip (if headerYes is checked)
            skip_count = 0
            if self.headerYesRadioButton.isChecked():
                try:
                    skip_count = int(self.headerRowLineEdit.text())
                except ValueError:
                    skip_count = 0  # fallback if user typed something invalid

            # 3. Read the Excel sheet, skipping rows if needed
            df = pd.read_excel(self.file_path, sheet_name=selected_sheet, skiprows=skip_count)

            # 4. If numYesRadioButton is checked, ignore the first column of the uploaded Excel
            material_column = 0
            # if self.numYesRadioButton.isChecked():
            #     # Drop the first column
            #     df = df.iloc[:, 1:]

            # ----------------------------------------------------------------
            # 5. Create a new Excel file with openpyxl & apply formatting
            # ----------------------------------------------------------------
            wb = openpyxl.Workbook()
            ws = wb.active
            ws.title = "Formatted Data"

            # 6. Set column widths (tweak as needed)
            ws.column_dimensions["A"].width = 3    # small
            ws.column_dimensions["B"].width = 7
            ws.column_dimensions["C"].width = 89   # bigger
            ws.column_dimensions["D"].width = 12
            ws.column_dimensions["E"].width = 15
            ws.column_dimensions["F"].width = 13
            ws.column_dimensions["G"].width = 14

            # 7. Row 11 is a fixed header row
            start_header_row = 11
            ws.row_dimensions[start_header_row].height = 25

            # Styles
            header_fill = PatternFill(start_color="D9D9D9", end_color="D9D9D9", fill_type="solid")
            
            thin_border = Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )

            header_border = Border(
                left=Side(style='thick'),
                right=Side(style='thick'),
                top=Side(style='thick'),
                bottom=Side(style='thick')
            )
            
            left_cell_border = Border(
                left=Side(style='thick'),
                right=Side(style='thin'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )

            right_cell_border = Border(
                left=Side(style='thin'),
                right=Side(style='thick'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )

            material_cell_border = Border(
                left=Side(style='medium'),
                right=Side(style='medium'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )

            center_alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            left_alignment = Alignment(horizontal="left", vertical="center")
            right_alignment = Alignment(horizontal="right", vertical="center")

            # 8. Write a fixed header row in the *new* Excel
            #    (Adjust text to match your exact requirement)
            header_titles = [
                ("B", "No"),
                ("C", "Uraian - Pekerjaan"),
                ("D", "Bobot % (I)"),
                ("E", "Presentase Pekerjaan (II)"),
                ("F", "Progress (I x II)"),
                ("G", "Kumulatif Progress %"),
            ]
            for col_letter, text in header_titles:
                cell = ws[f"{col_letter}{start_header_row}"]
                cell.value = text
                cell.fill = header_fill
                cell.border = header_border
                cell.alignment = center_alignment
                cell.font = Font(bold=True)

            # 9. Write the data starting at row 12 (since row 11 is header)
            data_start_row = start_header_row + 1

            for i, row_data in enumerate(df.values, start=data_start_row):
                # i is the row in the *new* Excel
                # row_data is the entire row from the DataFrame

                # Safety check: skip rows that don't have enough columns
                # (in case df has fewer columns than we expect)
                if len(row_data) < 5:
                    continue

                # Column B in new Excel = df col 0 = Numbering
                if self.numYesRadioButton.isChecked():
                    cell_b = ws.cell(row=i, column=2, value=row_data[0])
                    cell_b.border = left_cell_border
                    cell_b.alignment = center_alignment
                    material_column = 1

                # Column C in new Excel = df col 1 = Material
                if len(row_data) > 1:
                    cell_c = ws.cell(row=i, column=3, value=row_data[material_column])
                    cell_c.border = material_cell_border
                    cell_c.alignment = left_alignment

                # Column D in new Excel = df col 4 = Bobot % (I)
                cell_d = ws.cell(row=i, column=4, value=row_data[4])
                cell_d.border = thin_border
                cell_d.alignment = right_alignment

                # Column E in new Excel
                cell_e = ws.cell(row=i, column=5, value="-")
                cell_e.border = thin_border
                cell_e.alignment = right_alignment

                # Column F in new Excel
                cell_f = ws.cell(row=i, column=6, value="-")
                cell_f.border = thin_border
                cell_f.alignment = right_alignment

                # Column G in new Excel
                cell_g = ws.cell(row=i, column=7, value="-")
                cell_g.border = right_cell_border
                cell_g.alignment = right_alignment

            # ---------------------------------------------------------
            # 10. Last row
            # ---------------------------------------------------------
            end_row = data_start_row + len(df) - 1  # if df has X rows, last row is start + X - 1

            # Merge rows
            merge_start = end_row + 1
            merge_end = end_row + 2

            # MERGE FOR COLUMN B
            ws.merge_cells(
                start_row=merge_start, start_column=2,  # B=2
                end_row=merge_end,   end_column=2
            )
            merged_cell_b = ws.cell(row=merge_start, column=2)
            merged_cell_b.value = ""
            merged_cell_b.alignment = center_alignment
            merged_cell_b.border = Border(
                left=Side(style='thick'),
                right=Side(style='thin'),
                top=Side(style='double'),
                bottom=Side(style='thick')
            )
            merged_cell_b.font = Font(bold=True)

            # MERGE FOR COLUMN C
            ws.merge_cells(
                start_row=merge_start, start_column=3,  # C=3
                end_row=merge_end,   end_column=3
            )
            merged_cell_c = ws.cell(row=merge_start, column=3)
            merged_cell_c.value = "TOTAL"
            merged_cell_c.alignment = center_alignment
            merged_cell_c.border = Border(
                left=Side(style='medium'),
                right=Side(style='medium'),
                top=Side(style='double'),
                bottom=Side(style='thick')
            )
            merged_cell_c.font = Font(bold=True)

            # MERGE FOR COLUMN D
            ws.merge_cells(
                start_row=merge_start, start_column=4,  # D=4
                end_row=merge_end, end_column=4
            )
            merged_cell_d = ws.cell(row=merge_start, column=4)
            merged_cell_d.value = 100.00
            merged_cell_d.alignment = right_alignment
            merged_cell_d.border = Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='double'),
                bottom=Side(style='thick')
            )

            # MERGE FOR COLUMN E
            ws.merge_cells(
                start_row=merge_start, start_column=5,  # E=5
                end_row=merge_end, end_column=5
            )
            merged_cell_e = ws.cell(row=merge_start, column=5)
            merged_cell_e.value = "-"
            merged_cell_e.alignment = right_alignment
            merged_cell_e.border = Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='double'),
                bottom=Side(style='thick')
            )

            # MERGE FOR COLUMN F
            ws.merge_cells(
                start_row=merge_start, start_column=6,  # F=6
                end_row=merge_end, end_column=6
            )
            merged_cell_f = ws.cell(row=merge_start, column=6)
            merged_cell_f.value = "-"
            merged_cell_f.alignment = right_alignment
            merged_cell_f.border = Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='double'),
                bottom=Side(style='thick')
            )

            # MERGE FOR COLUMN G
            ws.merge_cells(
                start_row=merge_start, start_column=7,  # G=7
                end_row=merge_end, end_column=7
            )
            merged_cell_g = ws.cell(row=merge_start, column=7)
            merged_cell_g.value = "-"
            merged_cell_g.alignment = right_alignment
            merged_cell_g.border = Border(
                left=Side(style='thin'),
                right=Side(style='thick'),
                top=Side(style='double'),
                bottom=Side(style='thick')
            )

            # 11. Save the new Excel file
            guid = uuid.uuid4()
            output_file = f"formatted_output_{guid}.xlsx"
            wb.save(output_file)

            # 11. Notify the user
            QMessageBox.information(None, "Success", f"Data formatted and saved to {output_file}")

        except Exception as e:
            QMessageBox.critical(None, "Error", f"Failed to create formatted Excel:\n{str(e)}")


    def on_headerYesRadioButton_toggled(self, checked):
        # Show or hide the header row input controls based on the radio button state
        self.headerRowLabel.setVisible(checked)
        self.headerRowLineEdit.setVisible(checked)
        self.headerRowLineEdit.setEnabled(checked)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())