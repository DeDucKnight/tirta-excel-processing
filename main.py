# Form implementation generated from reading ui file 'progressExcel.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QFileDialog, QMessageBox
import pandas as pd
import openpyxl
from openpyxl.styles import PatternFill, Alignment, Border, Side, Font
import uuid
import re
import math

def int_to_roman(num):
        val = [
            1000, 900, 500, 400,
            100, 90, 50, 40,
            10, 9, 5, 4,
            1
        ]
        syms = [
            "M", "CM", "D", "CD",
            "C", "XC", "L", "XL",
            "X", "IX", "V", "IV",
            "I"
        ]
        roman_num = ""
        i = 0
        while num > 0:
            count = num // val[i]
            roman_num += syms[i] * count
            num %= val[i]
            i += 1
        return roman_num

def parse_numbered_item(text: str, max_prefix_len: int = 4):
    """
    Checks the first `max_prefix_len` characters of `text` for a '.' or ')'.
    If found, splits the text at the earliest occurrence of either character,
    and returns [number_part, item_part]. Otherwise, returns an empty list.
    """
    text = text.strip()
    # Look only at the first max_prefix_len characters
    prefix_section = text[:max_prefix_len]
    
    # Find the index of '.' and ')' within that section
    period_index = prefix_section.find('.')
    paren_index = prefix_section.find(')')
    
    # Create a list of valid indices (i.e. those that are not -1)
    valid_indices = [idx for idx in (period_index, paren_index) if idx != -1]
    
    if valid_indices:
        # Use the earliest occurrence
        split_index = min(valid_indices)
        # The numbering is all characters before the punctuation
        numbering = text[:split_index].strip()
        # The item text is the remainder after the punctuation
        item_part = text[split_index+1:].strip()
        return [numbering, item_part]
    else:
        return []

class Ui_MainWindow(object):
    def reset_state(self):
        # Clear stored file path and DataFrame
        self.file_path = None
        self.df = None

        # Reset file name label to default
        self.fileNameLabel.setText("Tidak ada file")

        # Clear and hide the worksheet combo box and its label
        self.sheetComboBox.clear()
        self.sheetComboBox.setVisible(False)
        self.sheetLabel.setVisible(False)

        # Disable the generate button
        self.generateButton.setEnabled(False)
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(724, 483)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # Upload Button
        self.uploadButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.uploadButton.setGeometry(QtCore.QRect(20, 10, 111, 31))
        self.uploadButton.setObjectName("uploadButton")

        # Label to Display File Name
        self.fileNameLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.fileNameLabel.setGeometry(QtCore.QRect(160, 10, 461, 31))
        self.fileNameLabel.setObjectName("fileNameLabel")

        # Sheet Selection Description Label
        self.sheetLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.sheetLabel.setGeometry(QtCore.QRect(20, 50, 200, 31))
        self.sheetLabel.setObjectName("sheetLabel")
        self.sheetLabel.setText("Pilih worksheet:")
        self.sheetLabel.setVisible(False)

        # Sheet Selection ComboBox
        self.sheetComboBox = QtWidgets.QComboBox(parent=self.centralwidget)
        self.sheetComboBox.setGeometry(QtCore.QRect(20, 80, 300, 31))
        self.sheetComboBox.setObjectName("sheetComboBox")
        self.sheetComboBox.setVisible(False)

        # Number Group Box
        self.numberGroupBox = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.numberGroupBox.setGeometry(QtCore.QRect(20, 120, 681, 101))
        self.numberGroupBox.setObjectName("numberGroupBox")
        self.numYesRadioButton = QtWidgets.QRadioButton(parent=self.numberGroupBox)
        self.numYesRadioButton.setGeometry(QtCore.QRect(10, 30, 89, 20))
        self.numYesRadioButton.setObjectName("numYesRadioButton")
        self.numNoRadioButton = QtWidgets.QRadioButton(parent=self.numberGroupBox)
        self.numNoRadioButton.setGeometry(QtCore.QRect(10, 60, 91, 20))
        self.numNoRadioButton.setObjectName("numNoRadioButton")

        # Generate Button
        self.generateButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.generateButton.setGeometry(QtCore.QRect(590, 390, 111, 31))
        self.generateButton.setObjectName("generateButton")
        self.generateButton.setEnabled(False)  # Disabled until a file is chosen

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 724, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actiontest1 = QtGui.QAction(parent=MainWindow)
        self.actiontest1.setObjectName("actiontest1")
        self.actiontest2 = QtGui.QAction(parent=MainWindow)
        self.actiontest2.setObjectName("actiontest2")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Connect button click events to custom slots
        self.uploadButton.clicked.connect(self.on_uploadButton_clicked)
        self.generateButton.clicked.connect(self.on_generateButton_clicked)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.uploadButton.setText(_translate("MainWindow", "Pilih file"))
        self.fileNameLabel.setText(_translate("MainWindow", "Tidak ada file"))
        self.sheetLabel.setText(_translate("MainWindow", "Pilih worksheet:"))
        self.numberGroupBox.setTitle(_translate("MainWindow", "Apakah file memiliki sistem penomoran?"))
        self.numYesRadioButton.setText(_translate("MainWindow", "Ada"))
        self.numNoRadioButton.setText(_translate("MainWindow", "Tidak ada"))
        self.generateButton.setText(_translate("MainWindow", "Buat excel"))

    def on_uploadButton_clicked(self):
        options = QFileDialog.Option.DontUseNativeDialog
        file_filter = "Excel Files (*.xlsx *.xls)"  # Restrict to Excel files only
        file_name, _ = QFileDialog.getOpenFileName(None, "Select Excel File", "", file_filter, options=options)

        if file_name:
            self.fileNameLabel.setText(file_name)  # Display the selected file path
            try:
                # Store the file path for later use
                self.file_path = file_name

                # Get available sheet names using pandas ExcelFile
                xls = pd.ExcelFile(file_name)
                sheet_names = xls.sheet_names

                # Populate the combo box with the sheet names and show it along with its label
                self.sheetComboBox.clear()
                self.sheetComboBox.addItems(sheet_names)
                self.sheetComboBox.setVisible(True)
                self.sheetLabel.setVisible(True)

                # Enable the generate button since a file has been chosen
                self.generateButton.setEnabled(True)
            except Exception as e:
                QMessageBox.critical(None, "Error", f"Failed to read file:\n{str(e)}")

    def on_generateButton_clicked(self):
        # 1. Ensure a file is selected & read the userâ€™s chosen sheet
        if not hasattr(self, "file_path"):
            QMessageBox.warning(None, "Warning", "Please upload an Excel file first.")
            return

        selected_sheet = self.sheetComboBox.currentText()

        try:
            # Read excel file
            df = pd.read_excel(self.file_path, sheet_name=selected_sheet, dtype=str)

            # If numYesRadioButton is checked, ignore the first column of the uploaded Excel
            material_column = 0
            price_column = 4
            if self.numYesRadioButton.isChecked():
                material_column = 1
                price_column = 5

            # calculate total price
            total_price = 0

            for row_data in df.values:
                price_str = str(row_data[price_column]).strip()
                try:
                    normalized = price_str.replace(".", "").replace(",", ".")
                    price_value = float(normalized)

                    if math.isnan(price_value):
                        price_value = 0.0
                except ValueError:
                    # If conversion fails (e.g., "T", "-", or any non-numeric), use 0
                    price_value = 0.0

                total_price += price_value

            # Create a new Excel file
            wb = openpyxl.Workbook()
            ws = wb.active
            ws.title = "Formatted Data"

            # Set column widths (tweak as needed)
            ws.column_dimensions["A"].width = 3
            ws.column_dimensions["B"].width = 7
            ws.column_dimensions["C"].width = 89
            ws.column_dimensions["D"].width = 12
            ws.column_dimensions["E"].width = 15
            ws.column_dimensions["F"].width = 13
            ws.column_dimensions["G"].width = 14

            start_header_row = 11
            ws.row_dimensions[start_header_row].height = 25

            # Styles
            # Fill
            header_fill = PatternFill(start_color="D9D9D9", end_color="D9D9D9", fill_type="solid")
            
            # Borders
            thin_border = Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )

            header_border = Border(
                left=Side(style='thick'),
                right=Side(style='thick'),
                top=Side(style='thick'),
                bottom=Side(style='thick')
            )
            
            left_cell_border = Border(
                left=Side(style='thick'),
                right=Side(style='thin'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )

            right_cell_border = Border(
                left=Side(style='thin'),
                right=Side(style='thick'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )

            material_cell_border = Border(
                left=Side(style='medium'),
                right=Side(style='medium'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )

            # Alignments
            center_alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            left_alignment = Alignment(horizontal="left", vertical="center")
            right_alignment = Alignment(horizontal="right", vertical="center")

            # Header Titles

            # Cell D2: "CV. TIRTA KUSUMA"
            ws["D2"].value = "CV. TIRTA KUSUMA"
            ws["D2"].font = Font(name="Cooper Black", size=20, bold=True)
            ws["D2"].alignment = Alignment(horizontal="center", vertical="center")

            # Cell D3: "General Contractor"
            ws["D3"].value = "General Contractor"
            ws["D3"].font = Font(name="Bodoni MT Black", size=14, bold=True)
            ws["D3"].alignment = Alignment(horizontal="center", vertical="center")

            # Cell D4: "Jl. Manyar Rejo V / 26, Surabaya 60118. Telp.  : 031-5912879, Fax  : 031-5913274"
            ws["D4"].value = "Jl. Manyar Rejo V / 26, Surabaya 60118. Telp.  : 031-5912879, Fax  : 031-5913274"
            ws["D4"].font = Font(name="Constantia", size=10)
            ws["D4"].alignment = Alignment(horizontal="center", vertical="center")

            # Cell D5: "E-mail : tirtakusuma26@yahoo.com"
            ws["D5"].value = "E-mail : tirtakusuma26@yahoo.com"
            ws["D5"].font = Font(name="Constantia", size=10)
            ws["D5"].alignment = Alignment(horizontal="center", vertical="center")

            # Thick bottom border on row 5, columns B through G
            thick_side = Side(style='thick')
            for col in range(2, 8):  # B=2 through G=7
                cell = ws.cell(row=5, column=col)
                cell.border = Border(
                    left=cell.border.left,
                    right=cell.border.right,
                    top=cell.border.top,
                    bottom=thick_side
                )

            # Excel header titles
            header_titles = [
                ("B", "No"),
                ("C", "Uraian - Pekerjaan"),
                ("D", "Bobot % (I)"),
                ("E", "Presentase Pekerjaan (II)"),
                ("F", "Progress (I x II)"),
                ("G", "Kumulatif Progress %"),
            ]
            for col_letter, text in header_titles:
                cell = ws[f"{col_letter}{start_header_row}"]
                cell.value = text
                cell.fill = header_fill
                cell.border = header_border
                cell.alignment = center_alignment
                cell.font = Font(bold=True)

            # Write the data
            data_start_row = start_header_row + 1
            title_row = 1
            subsection_row = 0
            subsection_total = 0
            last_subsection_row = 0

            for i, row_data in enumerate(df.values, start=data_start_row):
                # i is the row in the *new* Excel
                # row_data is the entire row from the DataFrame
                
                if len(row_data) < 5:
                    continue

                # Column B in new Excel = df col 0 = Numbering
                cell_b = ws.cell(row=i, column=2)
                cell_b.border = left_cell_border
                cell_b.alignment = center_alignment
                cell_b.font = Font(name="Arial", size=10, bold=True)
                if self.numYesRadioButton.isChecked():
                        cell_b.value = row_data[0]


                # Column C in new Excel = df col 1 = Material
                cell_c = ws.cell(row=i, column=3, value=row_data[material_column])
                cell_c.border = material_cell_border
                cell_c.font = Font(name="Arial", size=11, italic=True)
                cell_c.alignment = left_alignment

                # Column D in new Excel = df col 4 = Bobot % (I)
                cell_d = ws.cell(row=i, column=4)
                cell_d.border = thin_border
                cell_d.font = Font(name="Arial", size=10, italic=True)
                cell_d.alignment = right_alignment

                # Logic for price column
                price_str = str(row_data[price_column]).strip()

                if price_str.upper() == "T":
                    if self.numYesRadioButton.isChecked() is not True:
                        parse_item = parse_numbered_item(cell_c.value)
                        if parse_item:
                            cell_c.value = parse_item[1]
                            cell_b.value = parse_item[0]
                        else:
                            cell_b.value = int_to_roman(title_row)
                        title_row += 1
                    
                    cell_b.font = Font(name="Arial Black", size=10, bold=True)
                    cell_c.font = Font(name="Arial Black", size=10, bold=True, italic=True)

                    # calculate subtotal
                    if last_subsection_row > 1 and subsection_total > 0:
                        cell_subsection_total_label = ws.cell(row=last_subsection_row+1, column=3)
                        cell_subsection_total_label.border = Border(
                            left=cell_subsection_total_label.border.left,
                            right=cell_subsection_total_label.border.right,
                            top=Side(style='double'),
                            bottom=Side(style='double')
                        )

                        cell_subsection_total_value = ws.cell(row=last_subsection_row+1, column=4)
                        cell_subsection_total_value.value = subsection_total
                        cell_subsection_total_value.font = Font(bold=True)
                        cell_subsection_total_value.border = Border(
                            left=cell_subsection_total_value.border.left,
                            right=cell_subsection_total_value.border.right,
                            top=Side(style='double'),
                            bottom=Side(style='double')
                        )

                        # double line border
                        cell_subtotal_e = ws.cell(row=last_subsection_row+1, column=5)
                        cell_subtotal_e.border = Border(
                            left=cell_subtotal_e.border.left,
                            right=cell_subtotal_e.border.right,
                            top=Side(style='double'),
                            bottom=Side(style='double')
                        )

                        cell_subtotal_f = ws.cell(row=last_subsection_row+1, column=6)
                        cell_subtotal_f.border = Border(
                            left=cell_subtotal_f.border.left,
                            right=cell_subtotal_f.border.right,
                            top=Side(style='double'),
                            bottom=Side(style='double')
                        )

                        cell_subtotal_g = ws.cell(row=last_subsection_row+1, column=7, value="-")
                        cell_subtotal_g.border = Border(
                            left=cell_subtotal_g.border.left,
                            right=cell_subtotal_g.border.right,
                            top=Side(style='double'),
                            bottom=Side(style='double')
                        )

                        # reset subsection row
                        subsection_row = 0
                        subsection_total = 0
                        last_subsection_row = 0
                elif price_str in ["-", "", "nan"]:
                    # It's an empty cell
                    cell_d.value = ""
                else:
                    try:
                        # Attempt to parse as float
                        price_float = float(price_str.replace(".", "").replace(",", "."))
                        price_weight = price_float / total_price
                        # cell_d.value = round(price_float / total_price, 4)
                        cell_d.value = price_weight
                        subsection_row += 1
                        subsection_total += price_weight
                        last_subsection_row = i

                        if self.numYesRadioButton.isChecked() is not True:
                            parse_item = parse_numbered_item(str(cell_c.value))
                            if parse_item:
                                cell_c.value = parse_item[1]
                                cell_b.value = parse_item[0]
                            else:
                                cell_b.value = subsection_row
                        else:
                            cell_b.value = row_data[0]
        
                    except ValueError:
                        cell_d.value = ""

                # Column E in new Excel
                cell_e = ws.cell(row=i, column=5)
                cell_e.border = thin_border
                cell_e.alignment = right_alignment

                # Column F in new Excel
                cell_f = ws.cell(row=i, column=6, value="-")
                cell_f.border = thin_border
                cell_f.alignment = right_alignment

                # Column G in new Excel
                cell_g = ws.cell(row=i, column=7)
                cell_g.border = right_cell_border
                cell_g.alignment = right_alignment

            # Last row
            end_row = data_start_row + len(df) - 1

            # Merge rows
            merge_start = end_row + 1
            merge_end = end_row + 2

            # MERGE FOR COLUMN B
            merged_cell_b = ws.cell(row=merge_start, column=2)
            merged_cell_b.value = ""
            merged_cell_b.alignment = center_alignment
            merged_cell_b.border = Border(
                left=Side(style='thick'),
                right=Side(style='thin'),
                top=Side(style='double'),
                bottom=Side(style='thick')
            )
            merged_cell_b.font = Font(bold=True)

            # MERGE FOR COLUMN C
            merged_cell_c = ws.cell(row=merge_start, column=3)
            merged_cell_c.value = "TOTAL"
            merged_cell_c.alignment = center_alignment
            merged_cell_c.border = Border(
                left=Side(style='medium'),
                right=Side(style='medium'),
                top=Side(style='double'),
                bottom=Side(style='thick')
            )
            merged_cell_c.font = Font(bold=True)

            # MERGE FOR COLUMN D
            merged_cell_d = ws.cell(row=merge_start, column=4)
            merged_cell_d.value = 100.00
            merged_cell_d.alignment = right_alignment
            merged_cell_d.border = Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='double'),
                bottom=Side(style='thick')
            )

            # MERGE FOR COLUMN E
            merged_cell_e = ws.cell(row=merge_start, column=5)
            merged_cell_e.value = "-"
            merged_cell_e.alignment = right_alignment
            merged_cell_e.border = Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='double'),
                bottom=Side(style='thick')
            )

            # MERGE FOR COLUMN F
            merged_cell_f = ws.cell(row=merge_start, column=6)
            merged_cell_f.value = "-"
            merged_cell_f.alignment = right_alignment
            merged_cell_f.border = Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='double'),
                bottom=Side(style='thick')
            )

            # MERGE FOR COLUMN G
            merged_cell_g = ws.cell(row=merge_start, column=7)
            merged_cell_g.value = "-"
            merged_cell_g.alignment = right_alignment
            merged_cell_g.border = Border(
                left=Side(style='thin'),
                right=Side(style='thick'),
                top=Side(style='double'),
                bottom=Side(style='thick')
            )

            # Save the new Excel file
            guid = uuid.uuid4()
            output_file = f"formatted_output_{guid}.xlsx"
            wb.save(output_file)

            # Notify the user
            QMessageBox.information(None, "Success", f"Data formatted and saved to {output_file}")

            self.reset_state()
        except Exception as e:
            QMessageBox.critical(None, "Error", f"Failed to create formatted Excel:\n{str(e)}")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
